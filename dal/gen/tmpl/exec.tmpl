func (dao *base{{.pascalCaseObject}}DAO) Insert(ctx context.Context, data *{{.pascalCaseObject}}Data) (sql.Result, error) {
  query := fmt.Sprintf("insert into %s ({{.insertColumns}}) values ({{.insertValues}})", dao.table)
  result, err := dao.q.ExecContext(ctx, query, {{.insertArgs}})
  return result, err
}

func (dao *base{{.pascalCaseObject}}DAO) Update(ctx context.Context, {{.primaryField.CamelCaseName}} {{.primaryField.DataType}}, data *{{.pascalCaseObject}}Data) error {
  query := fmt.Sprintf("update %s set {{.updateSets}} where `{{.primaryField.Name}}` = ?", dao.table)
  _, err := dao.q.ExecContext(ctx, query, {{.updateArgs}}, {{.primaryField.CamelCaseName}})
  return err
}

func (dao *base{{.pascalCaseObject}}DAO) UpdatePartial(ctx context.Context, {{.primaryField.CamelCaseName}} {{.primaryField.DataType}}, data *{{.pascalCaseObject}}PartialData) error {
  sets := make([]string, 0, {{.fields | len}})
  args := make([]any, 0, {{.fields | len}})

  {{range .fields}}
    {{if or (eq .Name $.primaryField.Name) (eq .Name $.createField.Name)}}
    {{else if eq .Name $.modifiedField.Name}}
      {{if eq .DataType "int"}}
        sets = append(sets, "`{{.Name}}` = UNIX_TIMESTAMP()")
      {{else if eq .DataType "bigint"}}
        sets = append(sets, "`{{.Name}}` = ROUND(UNIX_TIMESTAMP(CURTIME(4) * 1000))")
      {{else}}
        sets = append(sets, "`{{.Name}}` = NOW({{if ne .Length nil}}{{.Length}}{{end}})")
      {{end}}
    {{else}}
      if v, present := data.{{.PascalCaseName}}.Get(); present {
        sets = append(sets, "`{{.Name}}` = ?")
        args = append(args, v)
      }
    {{end}}
  {{end}}

  args = append(args, {{.primaryField.CamelCaseName}})

  query := fmt.Sprintf("update %s set %s where `{{.primaryField.Name}}` = ?", dao.table, strings.Join(sets, ","))
  _, err := dao.q.ExecContext(ctx, query, args...)
  return err
}

func (dao *base{{.pascalCaseObject}}DAO) Delete(ctx context.Context, {{.primaryField.Name}} {{.primaryField.DataType}}) error {
  query := fmt.Sprintf("delete from %s where `{{.primaryField.Name}}` = ?", dao.table)
  _, err := dao.q.ExecContext(ctx, query, {{.primaryField.Name}})
  return err
}
